# name: test/sql/test_integration_and_errors.test
# group: [infera]

# tests error handling and integration with larger sql queries.

statement ok
pragma enable_verification

# load the infera extension from the local build artifact
statement ok
load 'build/release/extension/infera/infera.duckdb_extension'

# test 1: error handling for non-existent models

# infera_get_model_info for a missing model returns a non-null json containing an error field
query I
select infera_get_model_info('nonexistent_model') is null
----
0

# unloading a non-existent model is benign (idempotent) and returns false
statement ok
select infera_unload_model('nonexistent_model')

# test 2: batch processing and aggregation (deterministic)

statement ok
select infera_load_model('linear', 'test/models/linear.onnx')

# deterministic single-row feature table
statement ok
create or replace table features as
select 1::integer as id, 1.0::float as f1, 2.0::float as f2, 3.0::float as f3

# run prediction via a table scan
query IR
select id, infera_predict('linear', f1, f2, f3) as prediction from features
----
1	1.75

# aggregate (avg over single row) and row count
query II
select abs(avg(infera_predict('linear', f1, f2, f3)) - 1.75) < 1e-5, count(*) = 1 from features
----
true	true

# test 3: null value handling

statement ok
create or replace table features_with_nulls as
select 1 as id, 1.0::float as f1, 2.0::float as f2, null::float as f3

# the current implementation should throw an error when a feature is null
statement error
select infera_predict('linear', f1, f2, f3) from features_with_nulls
----
Invalid Input Error: Feature values cannot be NULL

# cleanup
statement ok
drop table features

statement ok
drop table features_with_nulls

statement ok
select infera_unload_model('linear')
